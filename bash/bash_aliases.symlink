########## GENERAL ALIASES
alias g="python manage.py runserver"
alias whatip="curl canhazip.com"
alias repos="cd ~/Work"
function va () { vim ~/.bash_aliases; }
function sa () { source ~/.bash_aliases; }
function vb () { vim ~/.bash_profile; }
function sb () { source ~/.bash_profile; }
function vv () { vim ~/.vimrc; }
function zappashell()
{
    docker run -ti -e AWS_PROFILE=$1 -v $(pwd):/var/task -v ~/.aws:/root/.aws --rm danielwhatmuff/zappa bash
}
########## END GENERAL ALIASES

########## GIT FUNCTIONS
function idgaf () { git push --force; }
function up () { git pull --rebase --prune $@ && git submodule update --init --recursive; }
function gs () { git status; }
alias gd="git diff --color | sed -E 's/^([^-+ ]*)[-+ ]/\\1/' | less -r"
alias gl="git log"
function gri () { git rebase --interactive "$1"; }
function gt () { git log --graph --oneline --decorate; }
function gta () { git log --all --graph --oneline --decorate; }
function ga () { git add $1; }
function gca () { git commit --all --amend; }
function gcam () { git commit --all -m "$1"; }
function gcm () { git commit -m "$1"; }
function gcp () { git commit --patch; }
function gcpc () { git cherry-pick --continue; }
function grc () { git rebase --continue; }
function gb () { git branch; }
function gp () { git pull --ff-only; }
git_clean_branches ()
{
    current_branch=$(git name-rev --name-only HEAD)
    git pull && \
    git branch --merged ${current_branch} | \
      grep -Ev "\* ${current_branch}|$(git_main_branch)" | \
      xargs -n 1 git branch -d;
}
grm ()
{
  git checkout $(git_main_branch) && git_clean_branches && git checkout - && git rebase -;
}
function git_main_branch ()
{
  echo $(git symbolic-ref refs/remotes/origin/HEAD | cut -d'/' -f4)
}
function gcnb ()
{
  git checkout $(git_main_branch) && git_clean_branches && git checkout -b "$1";
}
########## END GIT FUNCTIONS

########## MAC CONVENIENCE ALIASES
alias cp="cp -iv"
alias mv="mv -iv"
alias finder="open -a Finder ./"
alias ll='ls -FGlAhp'
cd() { builtin cd "$@"; ll; }
########## END MAC CONVENIENCE ALIASES

########## MAKE A PR TO GITHUB
function pr() {
	if [[ $1 == '-v' ]]; then
		gh pr view --web;
		return;
	fi

	local title=`git log -1 --oneline --format=%s`
	local branch=`git symbolic-ref --short -q HEAD`
	local mergeDst="$(git_main_branch)"
	
	if [[ $1 != '' ]]; then
		title="$1"
	fi

	gh pr create -d -t "[$branch] $title" -B "$mergeDst"
	gh pr view --web;
}
########## END MAKE A PR TO GITHUB

# review then approve
function rr() {
	local go_tmpl='{{.title}}{{.body}}'
	gh pr view --json title,body --template ${go_tmpl} $(pbpaste)
	echo "opening PR diff to review..."
	prd

	echo "Are you sure you want to approve? [yn]"
	local yn=$(yesno)
	if [[ $yn =~ ^[Yy]$ ]]; then
		echo "approving PR: $pbpaste"
		stamp
		return;
	fi

	if [[ $yn =~ ^[Nn]$ ]]; then
		echo "Do you want to open the PR in web? [yn]"
		local c=$(yesno)
	fi

	if [[ $c =~ ^[Yy]$ ]]; then
		gh pr view --web $(pbpaste)
	fi
}
